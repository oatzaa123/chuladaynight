{"version":3,"sources":["../../../../modules/web/news/news.controller.js"],"names":["unlink","util","promisify","fs","getNews","req","res","next","featuresNews","APIFeatures","News","find","query","filter","limitFields","paginate","sort","AllNews","totalItems","status","json","data","page","perPage","limit","length","getOneNews","id","params","findById","news","ErrorHandler","nextNews","item","_id","toString","findOne","createdAt","$gt","nextId","_","index","perviousNews","perviousId","findIndex","addNews","body","title_th","title_en","path","description","contentImages","files","coverImage","contentImage","name","coverImageName","push","arrImg","Promise","all","map","contentType","contentValue","contentName","contents","img","i","JSON","parse","th","en","contentValue_th","contentValue_en","content","Date","now","updatedAt","save","updateNews","oldFile","existsSync","paths","join","__dirname","unlinkSync","deleteNews","image","imageDirectory","checkImages","deleteOne","send","directory","filename","unlinkPromises"],"mappings":"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","sourcesContent":["import catchAsync from '../../../helpers/catchAsync'\r\nimport APIFeatures from '../../../utils/apiFeatures'\r\nimport ErrorHandler from '../../../helpers/errorHandler'\r\nimport News from './../../models/news.model'\r\nimport { uploadFile } from './../../../middleware/upload'\r\nimport util from 'util'\r\nimport fs from 'fs'\r\nimport paths from 'path'\r\nconst unlink = util.promisify(fs.unlink)\r\n\r\nexport const getNews = catchAsync(async (req, res, next) => {\r\n    const featuresNews = new APIFeatures(News.find(), req.query)\r\n        .filter()\r\n        .limitFields()\r\n        .paginate()\r\n        .sort()\r\n\r\n    const AllNews = await featuresNews.query\r\n    const totalItems = await News.find()\r\n\r\n    res.status(200).json({\r\n        status: 'success',\r\n        data: {\r\n            page: req.query.page,\r\n            perPage: req.query.limit,\r\n            totalItems: totalItems.length,\r\n            News: AllNews,\r\n        },\r\n    })\r\n})\r\n\r\nexport const getOneNews = catchAsync(async (req, res, next) => {\r\n    const { id } = req.params\r\n    const news = await News.findById(id)\r\n\r\n    if (!news) return next(new ErrorHandler('Data not found', 404))\r\n\r\n    res.status(200).json({\r\n        status: 'success',\r\n        data: {\r\n            news,\r\n        },\r\n    })\r\n})\r\n\r\nexport const nextNews = catchAsync(async (req, res, next) => {\r\n    const { id } = req.params\r\n    const AllNews = await News.find()\r\n    const news = AllNews.find((item) => item._id.toString() === id)\r\n\r\n    if (!news) return next(new ErrorHandler('Data not found', 404))\r\n\r\n    const nextId = await News.findOne({\r\n        createdAt: { $gt: news.createdAt },\r\n    })\r\n\r\n    const nextNews = nextId ? nextId : AllNews.find((_, index) => index === 0)\r\n\r\n    res.status(200).json({\r\n        status: 'success',\r\n        data: {\r\n            news: nextNews,\r\n        },\r\n    })\r\n})\r\n\r\nexport const perviousNews = catchAsync(async (req, res, next) => {\r\n    const { id } = req.params\r\n    const AllNews = await News.find()\r\n    const news = AllNews.find((item) => item._id.toString() === id)\r\n\r\n    if (!news) return next(new ErrorHandler('Data not found', 404))\r\n\r\n    // const perviousId = await news.findOne({\r\n    //     createdAt: { $lt: news.createdAt },\r\n    // })\r\n\r\n    const perviousId = AllNews.findIndex((item) => item._id === news._id)\r\n\r\n    const perviousNews =\r\n        perviousId > 0\r\n            ? AllNews.find((_, index) => index === perviousId - 1)\r\n            : AllNews.find((_, index) => index === AllNews.length - 1)\r\n\r\n    res.status(200).json({\r\n        status: 'success',\r\n        data: {\r\n            news: perviousNews,\r\n        },\r\n    })\r\n})\r\n\r\nexport const addNews = catchAsync(async (req, res, next) => {\r\n    const { title_th, title_en, path, description } = req.body\r\n    const contentImages = []\r\n    let coverImageName\r\n\r\n    if (req.files) {\r\n        const { coverImage, contentImage } = req.files\r\n\r\n        if (coverImage) {\r\n            const name = await uploadFile(coverImage, path)\r\n            if (!name)\r\n                return next(new ErrorHandler(`Fail to upload image.`, 400))\r\n            coverImageName = {\r\n                path,\r\n                name,\r\n            }\r\n        }\r\n\r\n        if (contentImage) {\r\n            if (contentImage.length > 0) {\r\n                contentImages = contentImage\r\n            } else {\r\n                contentImages.push(contentImage)\r\n            }\r\n        }\r\n    }\r\n\r\n    const arrImg = []\r\n    if (contentImages.length > 0) {\r\n        await Promise.all(\r\n            contentImages.map(async (item) => {\r\n                const name = await uploadFile(item, path)\r\n                if (!name)\r\n                    return next(new ErrorHandler(`Fail to upload image.`, 400))\r\n                arrImg.push({\r\n                    path,\r\n                    contentType: 'Image',\r\n                    contentValue: name,\r\n                    contentName: item.name,\r\n                })\r\n            })\r\n        )\r\n    }\r\n\r\n    const contents = []\r\n    await description.map(async (item) => {\r\n        const img = arrImg.find((i) => i.contentName === item) || null\r\n\r\n        if (img) {\r\n            contents.push({\r\n                path: img.path,\r\n                contentType: img.contentType,\r\n                contentValue: img.contentValue,\r\n            })\r\n        } else {\r\n            const { th, en } = JSON.parse(item)\r\n            contents.push({\r\n                contentType: 'Text',\r\n                contentValue_th: th,\r\n                contentValue_en: en,\r\n            })\r\n        }\r\n    })\r\n\r\n    const news = new News({\r\n        title_th,\r\n        title_en,\r\n        coverImage: coverImageName,\r\n        path,\r\n        content: contents,\r\n        createdAt: Date.now(),\r\n        updatedAt: Date.now(),\r\n    })\r\n\r\n    await news.save()\r\n    res.status(201).json({\r\n        status: 'success',\r\n        data: news,\r\n    })\r\n})\r\n\r\nexport const updateNews = catchAsync(async (req, res, next) => {\r\n    const { id } = req.params\r\n    const { title_th, title_en, path, description, oldFile } = req.body\r\n    const contentImages = []\r\n    let coverImageName\r\n\r\n    const news = await News.findById(id)\r\n\r\n    if (!news) return next(new ErrorHandler('Data not found', 404))\r\n\r\n    if (req.files) {\r\n        const { coverImage, contentImage } = req.files\r\n\r\n        if (coverImage) {\r\n            if (\r\n                JSON.parse(oldFile) &&\r\n                JSON.parse(oldFile).coverImage &&\r\n                fs.existsSync(\r\n                    paths.join(\r\n                        __dirname,\r\n                        `../../../assets/uploads/images/${path}/${\r\n                            JSON.parse(oldFile).coverImage\r\n                        }`\r\n                    )\r\n                )\r\n            ) {\r\n                fs.unlinkSync(\r\n                    paths.join(\r\n                        __dirname,\r\n                        `../../../assets/uploads/images/${path}/`,\r\n                        JSON.parse(oldFile).coverImage\r\n                    )\r\n                )\r\n            }\r\n            const name = await uploadFile(coverImage, path)\r\n            if (!name)\r\n                return next(new ErrorHandler(`Fail to upload image.`, 400))\r\n            coverImageName = {\r\n                path,\r\n                name,\r\n            }\r\n\r\n            news.coverImage = coverImageName\r\n        }\r\n\r\n        if (contentImage) {\r\n            if (contentImage.length > 0) {\r\n                contentImages = contentImage\r\n            } else {\r\n                contentImages.push(contentImage)\r\n            }\r\n        }\r\n    }\r\n\r\n    const arrImg = []\r\n    if (contentImages.length > 0) {\r\n        await Promise.all(\r\n            contentImages.map(async (item) => {\r\n                if (\r\n                    JSON.parse(oldFile) &&\r\n                    JSON.parse(oldFile).contentImage &&\r\n                    fs.existsSync(\r\n                        paths.join(\r\n                            __dirname,\r\n                            `../../../assets/uploads/images/${path}/${\r\n                                JSON.parse(oldFile).contentImage\r\n                            }`\r\n                        )\r\n                    )\r\n                ) {\r\n                    fs.unlinkSync(\r\n                        paths.join(\r\n                            __dirname,\r\n                            `../../../assets/uploads/images/${path}/`,\r\n                            JSON.parse(oldFile).contentImage\r\n                        )\r\n                    )\r\n                }\r\n                const name = await uploadFile(item, path)\r\n                if (!name)\r\n                    return next(new ErrorHandler(`Fail to upload image.`, 400))\r\n                arrImg.push({\r\n                    path,\r\n                    contentType: 'Image',\r\n                    contentValue: name,\r\n                    contentName: item.name,\r\n                })\r\n            })\r\n        )\r\n    }\r\n\r\n    const contents = []\r\n    if (description && description.length > 0) {\r\n        await description.map(async (item) => {\r\n            const img = arrImg.find((i) => i.contentName === item) || null\r\n\r\n            if (img) {\r\n                contents.push({\r\n                    path: img.path,\r\n                    contentType: img.contentType,\r\n                    contentValue: img.contentValue,\r\n                })\r\n            } else {\r\n                const { th, en } = JSON.parse(item)\r\n                contents.push({\r\n                    contentType: 'Text',\r\n                    contentValue_th: th,\r\n                    contentValue_en: en,\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    news.title_th = title_th\r\n    news.title_en = title_en\r\n    news.path = path\r\n    news.content = contents\r\n    news.updatedAt = Date.now()\r\n\r\n    await news.save()\r\n    res.status(200).json({\r\n        status: 'success',\r\n        data: news,\r\n    })\r\n})\r\n\r\nexport const deleteNews = catchAsync(async (req, res, next) => {\r\n    const { id } = req.params\r\n\r\n    const news = await News.findById(id)\r\n    const { path, name } = news.coverImage\r\n    const image = news.content.filter((i) => i.contentType === 'Image')\r\n\r\n    const imageDirectory = paths.join(\r\n        __dirname,\r\n        `../../../assets/uploads/images/${path}`\r\n    )\r\n\r\n    await checkImages(imageDirectory, name)\r\n    if (image.length > 0) {\r\n        image.map(\r\n            async (i) => await checkImages(imageDirectory, i.contentValue)\r\n        )\r\n    }\r\n\r\n    await News.deleteOne({ _id: id })\r\n    res.status(204).send()\r\n})\r\n\r\nconst checkImages = async (directory, filename) => {\r\n    const unlinkPromises = await unlink(`${directory}/${filename}`)\r\n\r\n    return unlinkPromises\r\n}\r\n"],"file":"news.controller.js"}