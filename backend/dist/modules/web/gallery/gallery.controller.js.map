{"version":3,"sources":["../../../../modules/web/gallery/gallery.controller.js"],"names":["readdir","util","promisify","fs","unlink","rmdir","getGalleries","req","res","next","featuresGallery","APIFeatures","Gallery","find","query","filter","limitFields","paginate","sort","AllGallery","status","json","data","total","length","getGallery","id","params","findById","gallery","ErrorHandler","countViews","save","nextGallery","item","_id","toString","findOne","createdAt","$gt","nextId","_","index","perviousGallery","perviousId","findIndex","addGallery","body","title_th","title_en","author","path","shortDescription_th","shortDescription_en","location","description","liveTime","contentImages","contentVideos","contentModels","descriptions","liveVideo","files","coverImage","authorImage","contentVideo","contentImage","contentModel","live","push","coverImageName","name","authorImageName","time","JSON","parse","Promise","all","map","i","arrModel","contentType","contentValue","contentName","arrImg","arrVdo","contents","model","img","vdo","th","en","contentValue_th","contentValue_en","image","videos","content","Date","now","updatedAt","updateGallery","oldFile","existsSync","paths","join","__dirname","unlinkSync","name_th","name_en","group","contact","facebook","line","email","phone","deleteGallery","imageDirectory","videoDirectory","modelDirectory","checkImages","deleteOne","directory","filename","unlinkPromises"],"mappings":"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","sourcesContent":["import catchAsync from '../../../helpers/catchAsync'\r\nimport APIFeatures from '../../../utils/apiFeatures'\r\nimport ErrorHandler from '../../../helpers/errorHandler'\r\nimport Gallery from './../../models/gallery.model'\r\nimport util from 'util'\r\nimport fs from 'fs'\r\nimport paths from 'path'\r\n\r\nconst readdir = util.promisify(fs.readdir)\r\nconst unlink = util.promisify(fs.unlink)\r\nconst rmdir = util.promisify(fs.rmdir)\r\nimport {\r\n    uploadFile,\r\n    uploadVideo,\r\n    uploadModel,\r\n} from './../../../middleware/upload'\r\n\r\nexport const getGalleries = catchAsync(async (req, res, next) => {\r\n    const featuresGallery = new APIFeatures(Gallery.find(), req.query)\r\n        .filter()\r\n        .limitFields()\r\n        .paginate()\r\n        .sort()\r\n\r\n    const AllGallery = await featuresGallery.query\r\n\r\n    res.status(200).json({\r\n        status: 'success',\r\n        data: {\r\n            total: AllGallery.length,\r\n            Gallery: AllGallery,\r\n        },\r\n    })\r\n})\r\n\r\nexport const getGallery = catchAsync(async (req, res, next) => {\r\n    const { id } = req.params\r\n    const gallery = await Gallery.findById(id)\r\n\r\n    if (!gallery) return next(new ErrorHandler('Data not found', 404))\r\n\r\n    gallery.countViews += 1\r\n\r\n    await gallery.save()\r\n\r\n    res.status(200).json({\r\n        status: 'success',\r\n        data: {\r\n            gallery,\r\n        },\r\n    })\r\n})\r\n\r\nexport const nextGallery = catchAsync(async (req, res, next) => {\r\n    const { id } = req.params\r\n    const AllGallery = await Gallery.find()\r\n    const gallery = AllGallery.find((item) => item._id.toString() === id)\r\n\r\n    if (!gallery) return next(new ErrorHandler('Data not found', 404))\r\n\r\n    const nextId = await Gallery.findOne({\r\n        createdAt: { $gt: gallery.createdAt },\r\n    })\r\n\r\n    const nextGallery = nextId\r\n        ? nextId\r\n        : AllGallery.find((_, index) => index === 0)\r\n\r\n    res.status(200).json({\r\n        status: 'success',\r\n        data: {\r\n            gallery: nextGallery,\r\n        },\r\n    })\r\n})\r\n\r\nexport const perviousGallery = catchAsync(async (req, res, next) => {\r\n    const { id } = req.params\r\n    const AllGallery = await Gallery.find()\r\n    const gallery = AllGallery.find((item) => item._id.toString() === id)\r\n\r\n    if (!gallery) return next(new ErrorHandler('Data not found', 404))\r\n\r\n    // const perviousId = await Gallery.findOne({\r\n    //     createdAt: { $lt: gallery.createdAt },\r\n    // })\r\n\r\n    const perviousId = AllGallery.findIndex((item) => item._id === gallery._id)\r\n\r\n    const perviousGallery =\r\n        perviousId > 0\r\n            ? AllGallery.find((_, index) => index === perviousId - 1)\r\n            : AllGallery.find((_, index) => index === AllGallery.length - 1)\r\n\r\n    res.status(200).json({\r\n        status: 'success',\r\n        data: {\r\n            gallery: perviousGallery,\r\n        },\r\n    })\r\n})\r\n\r\nexport const addGallery = catchAsync(async (req, res, next) => {\r\n    const {\r\n        title_th,\r\n        title_en,\r\n        author,\r\n        path,\r\n        shortDescription_th,\r\n        shortDescription_en,\r\n        location,\r\n        description,\r\n        liveTime,\r\n    } = req.body\r\n\r\n    var contentImages = []\r\n    var contentVideos = []\r\n    let contentModels = []\r\n    let descriptions = []\r\n    var coverImageName\r\n    var authorImageName\r\n    const liveVideo = []\r\n    if (req.files) {\r\n        const {\r\n            coverImage,\r\n            authorImage,\r\n            contentVideo,\r\n            contentImage,\r\n            contentModel,\r\n            live,\r\n        } = req.files\r\n\r\n        if (contentModel) {\r\n            if (contentModel.length > 0) {\r\n                contentModels = contentModel\r\n            } else {\r\n                contentModels.push(contentModel)\r\n            }\r\n        }\r\n\r\n        if (contentImage) {\r\n            if (contentImage.length > 0) {\r\n                contentImages = contentImage\r\n            } else {\r\n                contentImages.push(contentImage)\r\n            }\r\n        }\r\n\r\n        if (contentVideo) {\r\n            if (contentVideo.length > 0) {\r\n                contentVideos = contentVideo\r\n            } else {\r\n                contentVideos.push(contentVideo)\r\n            }\r\n        }\r\n\r\n        if (coverImage) {\r\n            coverImageName = {\r\n                path,\r\n                name: await uploadFile(coverImage, path),\r\n            }\r\n        }\r\n\r\n        if (authorImage) {\r\n            authorImageName = {\r\n                path,\r\n                name: await uploadFile(authorImage, path),\r\n            }\r\n        }\r\n\r\n        if (live) {\r\n            const time = JSON.parse(liveTime).liveTime\r\n            if (live.length > 0) {\r\n                await Promise.all(\r\n                    live.map(async (i, index) => {\r\n                        const name = await uploadVideo(i, path)\r\n                        if (!name)\r\n                            return next(\r\n                                new ErrorHandler(\r\n                                    `Can't upload video! please try again.`,\r\n                                    500\r\n                                )\r\n                            )\r\n                        liveVideo.push({\r\n                            path,\r\n                            name,\r\n                            liveTime: time[index],\r\n                        })\r\n                    })\r\n                )\r\n            } else {\r\n                await Promise.all(\r\n                    time.map(async (i) => {\r\n                        const name = await uploadVideo(live, path)\r\n                        if (!name)\r\n                            return next(\r\n                                new ErrorHandler(\r\n                                    `Can't upload video! please try again.`,\r\n                                    500\r\n                                )\r\n                            )\r\n                        liveVideo.push({\r\n                            path,\r\n                            name,\r\n                            liveTime: i,\r\n                        })\r\n                    })\r\n                )\r\n            }\r\n        }\r\n    } // req.file\r\n\r\n    const arrModel = []\r\n    if (contentModels.length > 0) {\r\n        await Promise.all(\r\n            contentModels.map(async (item) => {\r\n                const name = await uploadModel(item, path)\r\n                if (!name)\r\n                    return next(\r\n                        new ErrorHandler(\r\n                            `Can't upload model! please try again.`,\r\n                            500\r\n                        )\r\n                    )\r\n                arrModel.push({\r\n                    path,\r\n                    contentType: 'Model',\r\n                    contentValue: name,\r\n                    contentName: item.name,\r\n                })\r\n            })\r\n        )\r\n    }\r\n\r\n    var arrImg = []\r\n    if (contentImages.length > 0) {\r\n        await Promise.all(\r\n            contentImages.map(async (item) => {\r\n                const name = await uploadFile(item, path)\r\n                if (!name)\r\n                    return next(\r\n                        new ErrorHandler(\r\n                            `Can't upload image! please try again.`,\r\n                            500\r\n                        )\r\n                    )\r\n                arrImg.push({\r\n                    path,\r\n                    contentType: 'Image',\r\n                    contentValue: name,\r\n                    contentName: item.name,\r\n                })\r\n            })\r\n        )\r\n    }\r\n\r\n    var arrVdo = []\r\n    if (contentVideos && contentVideos.length > 0) {\r\n        await Promise.all(\r\n            contentVideos.map(async (item) => {\r\n                const name = await uploadVideo(item, path)\r\n                if (!name)\r\n                    return next(\r\n                        new ErrorHandler(\r\n                            `Can't upload video! please try again.`,\r\n                            500\r\n                        )\r\n                    )\r\n                arrVdo.push({\r\n                    path,\r\n                    contentType: 'Video',\r\n                    contentValue: name,\r\n                    contentName: item.name,\r\n                })\r\n            })\r\n        )\r\n    }\r\n\r\n    var contents = []\r\n    if (description && description.length > 0) {\r\n        if (typeof description === 'string') {\r\n            descriptions.push(description)\r\n        } else {\r\n            descriptions = description\r\n        }\r\n        await descriptions.map(async (item) => {\r\n            const model = arrModel.filter((i) => {\r\n                return i.contentName === item\r\n            })\r\n\r\n            var img = arrImg.filter((i) => {\r\n                return i.contentName === item\r\n            })\r\n\r\n            var vdo = arrVdo.filter((i) => {\r\n                return i.contentName === item\r\n            })\r\n\r\n            if (img.length > 0) {\r\n                contents.push({\r\n                    path: img[0].path,\r\n                    contentType: img[0].contentType,\r\n                    contentValue: img[0].contentValue,\r\n                })\r\n            } else if (model.length) {\r\n                contents.push({\r\n                    path: model[0].path,\r\n                    contentType: model[0].contentType,\r\n                    contentValue: model[0].contentValue,\r\n                })\r\n            } else if (vdo.length) {\r\n                contents.push({\r\n                    path: vdo[0].path,\r\n                    contentType: vdo[0].contentType,\r\n                    contentValue: vdo[0].contentValue,\r\n                })\r\n            } else {\r\n                const { th, en } = JSON.parse(item)\r\n                contents.push({\r\n                    contentType: 'Text',\r\n                    contentValue_th: th,\r\n                    contentValue_en: en,\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    var gallery = new Gallery({\r\n        title_th,\r\n        title_en,\r\n        author: { ...JSON.parse(author), image: authorImageName },\r\n        coverImage: coverImageName,\r\n        path,\r\n        shortDescription_th,\r\n        shortDescription_en,\r\n        live: {\r\n            videos: liveVideo,\r\n        },\r\n        location: JSON.parse(location),\r\n        content: contents,\r\n        createdAt: Date.now(),\r\n        updatedAt: Date.now(),\r\n    })\r\n\r\n    await gallery.save()\r\n\r\n    res.status(201).json({\r\n        status: 'success',\r\n        data: gallery,\r\n    })\r\n})\r\n\r\nexport const updateGallery = catchAsync(async (req, res, next) => {\r\n    const {\r\n        title_th,\r\n        title_en,\r\n        author,\r\n        path,\r\n        shortDescription_th,\r\n        shortDescription_en,\r\n        location,\r\n        description,\r\n        oldFile,\r\n        liveTime,\r\n    } = req.body\r\n\r\n    const { id } = req.params\r\n\r\n    const gallery = await Gallery.findById(id)\r\n\r\n    if (!gallery) return next(new ErrorHandler('Data not found', 404))\r\n\r\n    var contentImages = []\r\n    var contentVideos = []\r\n    let contentModels = []\r\n    var coverImageName\r\n    var authorImageName\r\n    const liveVideo = []\r\n    if (req.files) {\r\n        const {\r\n            coverImage,\r\n            authorImage,\r\n            contentVideo,\r\n            contentImage,\r\n            contentModel,\r\n            live,\r\n        } = req.files\r\n\r\n        if (contentModel) {\r\n            if (contentModel.length > 0) {\r\n                contentModels = contentModel\r\n            } else {\r\n                contentModels.push(contentModel)\r\n            }\r\n        }\r\n\r\n        if (contentImage) {\r\n            if (contentImage.length > 0) {\r\n                contentImages = contentImage\r\n            } else {\r\n                contentImages.push(contentImage)\r\n            }\r\n        }\r\n\r\n        if (contentVideo) {\r\n            if (contentVideo.length > 0) {\r\n                contentVideos = contentVideo\r\n            } else {\r\n                contentVideos.push(contentVideo)\r\n            }\r\n        }\r\n\r\n        if (coverImage) {\r\n            if (\r\n                JSON.parse(oldFile) &&\r\n                JSON.parse(oldFile).coverImage &&\r\n                fs.existsSync(\r\n                    paths.join(\r\n                        __dirname,\r\n                        `../../../assets/uploads/images/${path}/${\r\n                            JSON.parse(oldFile).coverImage\r\n                        }`\r\n                    )\r\n                )\r\n            ) {\r\n                fs.unlinkSync(\r\n                    paths.join(\r\n                        __dirname,\r\n                        `../../../assets/uploads/images/${path}/`,\r\n                        JSON.parse(oldFile).coverImage\r\n                    )\r\n                )\r\n            }\r\n            coverImageName = {\r\n                path,\r\n                name: await uploadFile(coverImage, path),\r\n            }\r\n\r\n            gallery.coverImage = coverImageName\r\n        }\r\n        if (authorImage) {\r\n            if (\r\n                JSON.parse(oldFile) &&\r\n                JSON.parse(oldFile).authorImage &&\r\n                fs.existsSync(\r\n                    paths.join(\r\n                        __dirname,\r\n                        `../../../assets/uploads/images/${path}/${\r\n                            JSON.parse(oldFile).authorImage\r\n                        }`\r\n                    )\r\n                )\r\n            ) {\r\n                fs.unlinkSync(\r\n                    paths.join(\r\n                        __dirname,\r\n                        `../../../assets/uploads/images/${path}/`,\r\n                        JSON.parse(oldFile).authorImage\r\n                    )\r\n                )\r\n            }\r\n            authorImageName = {\r\n                path,\r\n                name: await uploadFile(authorImage, path),\r\n            }\r\n\r\n            gallery.author.image = authorImageName\r\n        }\r\n\r\n        if (live) {\r\n            const time = JSON.parse(liveTime).liveTime\r\n            if (live.length > 0) {\r\n                if (\r\n                    JSON.parse(oldFile) &&\r\n                    JSON.parse(oldFile).liveVideo &&\r\n                    fs.existsSync(\r\n                        paths.join(\r\n                            __dirname,\r\n                            `../../../assets/uploads/videos/${path}/${\r\n                                JSON.parse(oldFile).liveVideo\r\n                            }`\r\n                        )\r\n                    )\r\n                ) {\r\n                    fs.unlinkSync(\r\n                        paths.join(\r\n                            __dirname,\r\n                            `../../../assets/uploads/videos/${path}/`,\r\n                            JSON.parse(oldFile).liveVideo\r\n                        )\r\n                    )\r\n                }\r\n                await Promise.all(\r\n                    live.map(async (i, index) => {\r\n                        const name = await uploadVideo(i, path)\r\n                        if (!name)\r\n                            return next(\r\n                                new ErrorHandler(\r\n                                    `Can't upload video! please try again.`,\r\n                                    500\r\n                                )\r\n                            )\r\n                        liveVideo.push({\r\n                            path,\r\n                            name,\r\n                            liveTime: time[index],\r\n                        })\r\n                    })\r\n                )\r\n            } else {\r\n                if (\r\n                    JSON.parse(oldFile) &&\r\n                    JSON.parse(oldFile).liveVideo &&\r\n                    fs.existsSync(\r\n                        paths.join(\r\n                            __dirname,\r\n                            `../../../assets/uploads/images/${path}/${\r\n                                JSON.parse(oldFile).liveVideo\r\n                            }`\r\n                        )\r\n                    )\r\n                ) {\r\n                    fs.unlinkSync(\r\n                        paths.join(\r\n                            __dirname,\r\n                            `../../../assets/uploads/images/${path}/`,\r\n                            JSON.parse(oldFile).liveVideo\r\n                        )\r\n                    )\r\n                }\r\n                await Promise.all(\r\n                    time.map(async (i) => {\r\n                        const name = await uploadVideo(live, path)\r\n                        if (!name)\r\n                            return next(\r\n                                new ErrorHandler(\r\n                                    `Can't upload video! please try again.`,\r\n                                    500\r\n                                )\r\n                            )\r\n                        liveVideo.push({\r\n                            path,\r\n                            name,\r\n                            liveTime: i,\r\n                        })\r\n                    })\r\n                )\r\n            }\r\n        }\r\n    } // req.file\r\n\r\n    const arrModel = []\r\n    if (contentModels.length > 0) {\r\n        if (typeof JSON.parse(oldFile).contentModel === 'string') {\r\n            if (\r\n                JSON.parse(oldFile) &&\r\n                JSON.parse(oldFile).contentModel &&\r\n                fs.existsSync(\r\n                    paths.join(\r\n                        __dirname,\r\n                        `../../../assets/uploads/models/${path}/${\r\n                            JSON.parse(oldFile).contentModel\r\n                        }`\r\n                    )\r\n                )\r\n            ) {\r\n                fs.unlinkSync(\r\n                    paths.join(\r\n                        __dirname,\r\n                        `../../../assets/uploads/models/${path}/`,\r\n                        JSON.parse(oldFile).contentModel\r\n                    )\r\n                )\r\n            }\r\n        } else {\r\n            JSON.parse(oldFile).contentModel.map((i) => {\r\n                if (\r\n                    JSON.parse(oldFile) &&\r\n                    JSON.parse(oldFile).contentModel &&\r\n                    fs.existsSync(\r\n                        paths.join(\r\n                            __dirname,\r\n                            `../../../assets/uploads/models/${path}/${\r\n                                JSON.parse(oldFile).contentModel\r\n                            }`\r\n                        )\r\n                    )\r\n                ) {\r\n                    fs.unlinkSync(\r\n                        paths.join(\r\n                            __dirname,\r\n                            `../../../assets/uploads/models/${path}/`,\r\n                            i\r\n                        )\r\n                    )\r\n                }\r\n            })\r\n        }\r\n        await Promise.all(\r\n            contentModels.map(async (item) => {\r\n                const name = await uploadModel(item, path)\r\n                if (!name)\r\n                    return next(\r\n                        new ErrorHandler(\r\n                            `Can't upload model! please try again.`,\r\n                            500\r\n                        )\r\n                    )\r\n                arrModel.push({\r\n                    path,\r\n                    contentType: 'Model',\r\n                    contentValue: name,\r\n                    contentName: item.name,\r\n                })\r\n            })\r\n        )\r\n    }\r\n\r\n    var arrImg = []\r\n    if (contentImages.length > 0) {\r\n        if (typeof JSON.parse(oldFile).contentImage === 'string') {\r\n            if (\r\n                JSON.parse(oldFile) &&\r\n                JSON.parse(oldFile).contentImage &&\r\n                fs.existsSync(\r\n                    paths.join(\r\n                        __dirname,\r\n                        `../../../assets/uploads/models/${path}/${\r\n                            JSON.parse(oldFile).contentImage\r\n                        }`\r\n                    )\r\n                )\r\n            ) {\r\n                fs.unlinkSync(\r\n                    paths.join(\r\n                        __dirname,\r\n                        `../../../assets/uploads/images/${path}/`,\r\n                        JSON.parse(oldFile).contentImage\r\n                    )\r\n                )\r\n            }\r\n        } else {\r\n            JSON.parse(oldFile).contentImage.map((i) => {\r\n                if (\r\n                    JSON.parse(oldFile) &&\r\n                    JSON.parse(oldFile).contentImage &&\r\n                    fs.existsSync(\r\n                        paths.join(\r\n                            __dirname,\r\n                            `../../../assets/uploads/models/${path}/${\r\n                                JSON.parse(oldFile).contentImage\r\n                            }`\r\n                        )\r\n                    )\r\n                ) {\r\n                    fs.unlinkSync(\r\n                        paths.join(\r\n                            __dirname,\r\n                            `../../../assets/uploads/images/${path}/`,\r\n                            i\r\n                        )\r\n                    )\r\n                }\r\n            })\r\n        }\r\n        await Promise.all(\r\n            contentImages.map(async (item) => {\r\n                const name = await uploadFile(item, path)\r\n                if (!name)\r\n                    return next(\r\n                        new ErrorHandler(\r\n                            `Can't upload image! please try again.`,\r\n                            500\r\n                        )\r\n                    )\r\n                arrImg.push({\r\n                    path,\r\n                    contentType: 'Image',\r\n                    contentValue: name,\r\n                    contentName: item.name,\r\n                })\r\n            })\r\n        )\r\n    }\r\n\r\n    var arrVdo = []\r\n    if (contentVideos.length > 0) {\r\n        if (typeof JSON.parse(oldFile).contentVideo === 'string') {\r\n            if (\r\n                JSON.parse(oldFile) &&\r\n                JSON.parse(oldFile).contentVideo &&\r\n                fs.existsSync(\r\n                    paths.join(\r\n                        __dirname,\r\n                        `../../../assets/uploads/videos/${path}/${\r\n                            JSON.parse(oldFile).contentVideo\r\n                        }`\r\n                    )\r\n                )\r\n            ) {\r\n                fs.unlinkSync(\r\n                    paths.join(\r\n                        __dirname,\r\n                        `../../../assets/uploads/videos/${path}/`,\r\n                        JSON.parse(oldFile).contentVideo\r\n                    )\r\n                )\r\n            }\r\n        }\r\n\r\n        if (\r\n            JSON.parse(oldFile) &&\r\n            JSON.parse(oldFile).contentVideo &&\r\n            JSON.parse(oldFile).contentVideo.length > 0\r\n        ) {\r\n            JSON.parse(oldFile).contentVideo.map((i) => {\r\n                if (\r\n                    fs.existsSync(\r\n                        paths.join(\r\n                            __dirname,\r\n                            `../../../assets/uploads/videos/${path}/${i}`\r\n                        )\r\n                    )\r\n                ) {\r\n                    fs.unlinkSync(\r\n                        paths.join(\r\n                            __dirname,\r\n                            `../../../assets/uploads/videos/${path}/`,\r\n                            i\r\n                        )\r\n                    )\r\n                }\r\n            })\r\n        }\r\n\r\n        await Promise.all(\r\n            contentVideos.map(async (item) => {\r\n                const name = await uploadVideo(item, path)\r\n                if (!name)\r\n                    return next(\r\n                        new ErrorHandler(\r\n                            `Can't upload video! please try again.`,\r\n                            500\r\n                        )\r\n                    )\r\n                arrVdo.push({\r\n                    path,\r\n                    contentType: 'Video',\r\n                    contentValue: name,\r\n                    contentName: item.name,\r\n                })\r\n            })\r\n        )\r\n    }\r\n\r\n    var contents = []\r\n    if (description && description.length > 0) {\r\n        await description.map(async (item) => {\r\n            const model = arrModel.filter((i) => {\r\n                return i.contentName === item\r\n            })\r\n\r\n            var img = arrImg.filter((i) => {\r\n                return i.contentName === item\r\n            })\r\n\r\n            var vdo = arrVdo.filter((i) => {\r\n                return i.contentName === item\r\n            })\r\n\r\n            if (img.length > 0) {\r\n                contents.push({\r\n                    path: img[0].path,\r\n                    contentType: img[0].contentType,\r\n                    contentValue: img[0].contentValue,\r\n                })\r\n            } else if (model.length) {\r\n                contents.push({\r\n                    path: model[0].path,\r\n                    contentType: model[0].contentType,\r\n                    contentValue: model[0].contentValue,\r\n                })\r\n            } else if (vdo.length) {\r\n                contents.push({\r\n                    path: vdo[0].path,\r\n                    contentType: vdo[0].contentType,\r\n                    contentValue: vdo[0].contentValue,\r\n                })\r\n            } else {\r\n                const { th, en } = JSON.parse(item)\r\n                contents.push({\r\n                    contentType: 'Text',\r\n                    contentValue_th: th,\r\n                    contentValue_en: en,\r\n                })\r\n            }\r\n        })\r\n\r\n        gallery.content = contents\r\n    }\r\n\r\n    gallery.title_th = title_th\r\n    gallery.title_en = title_en\r\n    gallery.author.name_th = JSON.parse(author).name_th\r\n    gallery.author.name_en = JSON.parse(author).name_en\r\n    gallery.author.group = JSON.parse(author).group\r\n    gallery.author.contact.facebook = JSON.parse(author).contact.facebook\r\n    gallery.author.contact.line = JSON.parse(author).contact.line\r\n    gallery.author.contact.email = JSON.parse(author).contact.email\r\n    gallery.author.contact.phone = JSON.parse(author).contact.phone\r\n    gallery.path = path\r\n    gallery.shortDescription_th = shortDescription_th\r\n    gallery.shortDescription_en = shortDescription_en\r\n    gallery.location = JSON.parse(location)\r\n    gallery.updatedAt = Date.now()\r\n    gallery.live.videos = liveVideo\r\n    gallery.live.updatedAt = Date.now()\r\n\r\n    await gallery.save()\r\n\r\n    res.status(200).json({\r\n        status: 'success',\r\n        data: gallery,\r\n    })\r\n})\r\n\r\nexport const deleteGallery = catchAsync(async (req, res, next) => {\r\n    const { id } = req.params\r\n\r\n    const gallery = await Gallery.findById(id)\r\n    const { path } = gallery.coverImage\r\n    const imageDirectory = paths.join(\r\n        __dirname,\r\n        `../../../assets/uploads/images/${path}`\r\n    )\r\n    const videoDirectory = paths.join(\r\n        __dirname,\r\n        `../../../assets/uploads/videos/${path}`\r\n    )\r\n    const modelDirectory = paths.join(\r\n        __dirname,\r\n        `../../../assets/uploads/models/${path}`\r\n    )\r\n\r\n    await checkImages(imageDirectory)\r\n    await checkImages(videoDirectory)\r\n    await checkImages(modelDirectory)\r\n\r\n    await Gallery.deleteOne({ _id: id })\r\n\r\n    res.status(204)\r\n})\r\n\r\nconst checkImages = async (directory) => {\r\n    const files = await readdir(directory)\r\n    const unlinkPromises = await Promise.all(\r\n        files.map((filename) => unlink(`${directory}/${filename}`))\r\n    )\r\n    await rmdir(directory)\r\n    return unlinkPromises\r\n}\r\n"],"file":"gallery.controller.js"}