{"version":3,"sources":["../../middleware/upload.js"],"names":["uploadFile","file","pathFolder","mimetype","name","indexOf","imageName","Date","now","split","length","storePath","path","join","__dirname","fs","existsSync","mkdirSync","mv","err","console","log","uploadVideo","videoName","uploadModel","modelName"],"mappings":"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","sourcesContent":["import path from 'path'\r\nimport sharp from 'sharp'\r\nimport fs from 'fs'\r\n\r\nexport const uploadFile = async (file, pathFolder) => {\r\n    const { mimetype, name } = await file\r\n    if (\r\n        ['image/jpeg', 'image/jpg', 'image/png', 'image/gif'].indexOf(\r\n            mimetype\r\n        ) < 0\r\n    ) {\r\n        return false\r\n    }\r\n\r\n    const imageName = `${Date.now()}.${\r\n        name.split('.')[name.split('.').length - 1]\r\n    }`\r\n\r\n    const storePath = path.join(\r\n        __dirname,\r\n        `/../assets/uploads/images/${pathFolder}/`,\r\n        imageName\r\n    )\r\n\r\n    if (\r\n        !fs.existsSync(\r\n            path.join(__dirname, `/../assets/uploads/images/${pathFolder}/`)\r\n        )\r\n    ) {\r\n        fs.mkdirSync(\r\n            path.join(__dirname, `/../assets/uploads/images/${pathFolder}/`)\r\n        )\r\n    }\r\n\r\n    file.mv(storePath, (err) => {\r\n        if (err) {\r\n            console.log(err)\r\n            return false\r\n        }\r\n    })\r\n\r\n    // const img = await sharp(file.data)\r\n    //     .resize({ height: '500px', fit: 'fill' })\r\n    //     .png()\r\n    //     .toFile(storePath)\r\n\r\n    // return img ? imageName : null\r\n    return imageName\r\n}\r\n\r\nexport const uploadVideo = async (file, pathFolder) => {\r\n    const { mimetype, name } = await file\r\n    if (['video/mp4', 'video/x-matroska'].indexOf(mimetype) < 0) {\r\n        return false\r\n    }\r\n\r\n    const videoName = `${Date.now()}.${\r\n        name.split('.')[name.split('.').length - 1]\r\n    }`\r\n\r\n    const storePath = path.join(\r\n        __dirname,\r\n        `/../assets/uploads/videos/${pathFolder}/`,\r\n        videoName\r\n    )\r\n\r\n    if (\r\n        !fs.existsSync(\r\n            path.join(__dirname, `/../assets/uploads/videos/${pathFolder}/`)\r\n        )\r\n    ) {\r\n        fs.mkdirSync(\r\n            path.join(__dirname, `/../assets/uploads/videos/${pathFolder}/`)\r\n        )\r\n    }\r\n\r\n    file.mv(storePath, (err) => {\r\n        if (err) return false\r\n    })\r\n\r\n    return videoName\r\n}\r\n\r\nexport const uploadModel = async (file, pathFolder) => {\r\n    const { mimetype, name } = await file\r\n    if (['model/glb', 'model/gltf-binary'].indexOf(mimetype) < 0) {\r\n        return false\r\n    }\r\n\r\n    const modelName = `${Date.now()}.${\r\n        name.split('.')[name.split('.').length - 1]\r\n    }`\r\n\r\n    const storePath = path.join(\r\n        __dirname,\r\n        `/../assets/uploads/models/${pathFolder}/`,\r\n        modelName\r\n    )\r\n\r\n    if (\r\n        !fs.existsSync(\r\n            path.join(__dirname, `/../assets/uploads/models/${pathFolder}/`)\r\n        )\r\n    ) {\r\n        fs.mkdirSync(\r\n            path.join(__dirname, `/../assets/uploads/models/${pathFolder}/`)\r\n        )\r\n    }\r\n\r\n    file.mv(storePath, (err) => {\r\n        if (err) return false\r\n    })\r\n\r\n    return modelName\r\n}\r\n"],"file":"upload.js"}