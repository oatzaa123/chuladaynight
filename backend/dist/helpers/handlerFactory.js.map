{"version":3,"sources":["../../helpers/handlerFactory.js"],"names":["getOne","Model","popOptions","req","res","next","query","findById","params","id","populate","doc","ErrorHandler","status","json","data","getAll","filter","features","APIFeatures","find","limitFields","paginate","sort","page","limit","config","pageLimit","excludedFields","forEach","el","countDocuments","total","totalPages","Math","ceil","currentPage","perPage","deleteOne","findByIdAndDelete","AppError","updateOne","findByIdAndUpdate","body","new","runValidators","createOne","create"],"mappings":"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","sourcesContent":["import config from '../config'\r\n\r\nimport catchAsync from './catchAsync'\r\nimport ErrorHandler from '../utils/errorHandler'\r\nimport APIFeatures from '../utils/apiFeatures'\r\n\r\nexport const getOne = (Model, popOptions) =>\r\n    catchAsync(async (req, res, next) => {\r\n        let query = Model.findById(req.params.id)\r\n        if (popOptions) query = query.populate(popOptions)\r\n        const doc = await query\r\n\r\n        if (!doc) {\r\n            return next(new ErrorHandler('No document found with that ID', 404))\r\n        }\r\n\r\n        res.status(200).json({\r\n            status: 'success',\r\n            data: doc,\r\n        })\r\n    })\r\n\r\nexport const getAll = (Model) =>\r\n    catchAsync(async (req, res, next) => {\r\n        const filter = {}\r\n\r\n        const features = new APIFeatures(Model.find(filter), req.query)\r\n            .filter()\r\n            .limitFields()\r\n            .paginate()\r\n            .sort()\r\n\r\n        const doc = await features.query\r\n\r\n        const page = +req.query.page || 1\r\n        const limit = +req.query.limit || config.pageLimit\r\n\r\n        const query = new APIFeatures()\r\n            .excludedFields()\r\n            .forEach((el) => delete req.query[el])\r\n\r\n        const total = await Model.countDocuments(query)\r\n\r\n        res.status(200).json({\r\n            status: 'success',\r\n            total,\r\n            totalPages: Math.ceil(total / limit),\r\n            currentPage: page,\r\n            perPage: limit,\r\n            data: doc,\r\n        })\r\n    })\r\n\r\nexport const deleteOne = (Model) =>\r\n    catchAsync(async (req, res, next) => {\r\n        const doc = await Model.findByIdAndDelete(req.params.id)\r\n\r\n        if (!doc) {\r\n            return next(new AppError('No document found with that ID', 404))\r\n        }\r\n\r\n        res.status(204).json({\r\n            status: 'success',\r\n            data: null,\r\n        })\r\n    })\r\n\r\nexport const updateOne = (Model) =>\r\n    catchAsync(async (req, res, next) => {\r\n        const doc = await Model.findByIdAndUpdate(req.params.id, req.body, {\r\n            new: true,\r\n            runValidators: true,\r\n        })\r\n\r\n        if (!doc) {\r\n            return next(new AppError('No document found with that ID', 404))\r\n        }\r\n\r\n        res.status(200).json({\r\n            status: 'success',\r\n            data: doc,\r\n        })\r\n    })\r\n\r\nexport const createOne = (Model) =>\r\n    catchAsync(async (req, res, next) => {\r\n        const doc = await Model.create(req.body)\r\n\r\n        res.status(201).json({\r\n            status: 'success',\r\n            data: doc,\r\n        })\r\n    })\r\n"],"file":"handlerFactory.js"}